import{y as n,r as s,g as r,i,n as c}from"./vendor.e1f4f720.js";import{o as l}from"./queryEngineUtils.f44bbf1c.js";import"./DimensioningAnalysisView3D.01365e44.js";import"./LineVisualElement.77cea539.js";import"./analysisViewUtils.65950ebe.js";import"./PointVisualElement.3123f97c.js";import"./RightAngleQuadVisualElement.c48c6392.js";import"./Segment.acc7f30e.js";import"./elevationInfoUtils.7190964b.js";import"./dragEventPipeline3D.53aa8ccb.js";import"./EditGeometryOperations.df4aed1b.js";import"./QueryEngineResult.e001e53c.js";import"./WhereClause.de5a3790.js";import"./utils.b67e6d51.js";import"./ClassBreaksDefinition.ee27788f.js";import"./json.d1a0fa35.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:s(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>l(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([c("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
