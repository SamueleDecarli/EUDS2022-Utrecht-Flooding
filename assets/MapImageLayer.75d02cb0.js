import{r3 as x,rv as w,r4 as O,mE as I,mF as E,mG as M,mH as L,r5 as T,r7 as F,rt as P,bX as $,B as J,r as N,mJ as R,fO as b,s5 as g,s6 as f,hL as U,hA as j,az as S,bt as v,w as q,ak as A,hF as k,r8 as z,rM as V,e as s,d as o,dd as G,fn as H,de as _,mM as B,n as C}from"./index.d1e29527.js";import{E as D,y as K,X as W}from"./SublayersOwner.e5f837dc.js";let r=class extends x(w(O(D(K(I(E(M(L(T(F(P($(J))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,a){return typeof e=="string"?{url:e,...a}:e}load(e){const a=N(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(R).then(()=>this._fetchService(a))),Promise.resolve(this)}readImageFormat(e,a){const h=a.supportedImageFormatTypes;return h&&h.includes("PNG32")?"png32":"png24"}writeSublayers(e,a,h,t){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const i=b(t.origin);if(i===g.PORTAL_ITEM){const y=this.createSublayersForOrigin("service").sublayers;n=f(l,y,g.SERVICE)}else if(i>g.PORTAL_ITEM){const y=this.createSublayersForOrigin("portal-item");n=f(l,y.sublayers,b(y.origin))}}const p=[],c={writeSublayerStructure:n,...t};let u=n;l.forEach(i=>{const y=i.write({},c);p.push(y),u=u||i.originOf("visible")==="user"}),p.some(i=>Object.keys(i).length>1)&&(a.layers=p),u&&(a.visibleLayers=l.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,a,h,t){const l=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new U({layer:this,floors:t==null?void 0:t.floors,scale:j({extent:e,width:a})*l}),p=n.toJSON();n.destroy();const c=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},u=e&&e.spatialReference,i=u.wkid||JSON.stringify(u.toJSON());p.dpi*=l;const y={};if(t!=null&&t.timeExtent){const{start:d,end:m}=t.timeExtent.toJSON();y.time=d&&m&&d===m?""+d:`${d==null?"null":d},${m==null?"null":m}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:i,imageSR:i,size:a+","+h,...p,...c,...y}}async fetchImage(e,a,h,t){var p;const l={responseType:"image",signal:(p=t==null?void 0:t.signal)!=null?p:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,a,h,t),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});return v(n,l).then(c=>c.data).catch(c=>{throw q(c)?c:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:c})})}async fetchRecomputedExtents(e={}){const a={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:h}=await v(this.url,a),{extent:t,fullExtent:l,timeExtent:n}=h,p=t||l;return{fullExtent:p&&A.fromJSON(p),timeExtent:n&&k.fromJSON({start:n[0],end:n[1]})}}loadAll(){return z(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return V(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:a,ssl:h}=await v(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});h&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=a,this.read(a,{origin:"service",url:this.parsedUrl})}};s([o({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([o()],r.prototype,"dpi",void 0),s([o()],r.prototype,"gdbVersion",void 0),s([o()],r.prototype,"imageFormat",void 0),s([G("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([o()],r.prototype,"imageTransparency",void 0),s([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([o({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([o()],r.prototype,"sourceJSON",void 0),s([o({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([H("sublayers",{layers:{type:[W]},visibleLayers:{type:[_]}})],r.prototype,"writeSublayers",null),s([o({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([o({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([o(B)],r.prototype,"url",void 0),r=s([C("esri.layers.MapImageLayer")],r);const Y=r;export{Y as default};
