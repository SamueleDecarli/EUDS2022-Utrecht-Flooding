import{y as n,r as c,e as r,d as i,n as l}from"./index.4cc6cf99.js";import{o as s}from"./queryEngineUtils.2dbfdb7b.js";import"./DimensioningAnalysisView3D.1b0fdefb.js";import"./LineVisualElement.18bf4dc9.js";import"./analysisViewUtils.dc7f1e8d.js";import"./PointVisualElement.d29f0c5b.js";import"./RightAngleQuadVisualElement.b7ce59a3.js";import"./Segment.5d1089b8.js";import"./elevationInfoUtils.f44d0d89.js";import"./dragEventPipeline3D.93d1cacc.js";import"./EditGeometryOperations.3e30c3ff.js";import"./QueryEngineResult.24a50ebd.js";import"./WhereClause.7c2b73b7.js";import"./utils.a192fe9b.js";import"./ClassBreaksDefinition.b5093feb.js";import"./json.d1a0fa35.js";import"./dehydratedFeatureComparison.7b9a4f86.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:c(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>s(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([l("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
