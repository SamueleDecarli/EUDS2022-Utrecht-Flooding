import{y as n,r as s,i as r,j as i,n as c}from"./vendor.5530b0a9.js";import{o as l}from"./queryEngineUtils.a8bfb0f8.js";import"./DimensioningAnalysisView3D.7e1ffdb8.js";import"./LineVisualElement.790f66b9.js";import"./analysisViewUtils.73722654.js";import"./PointVisualElement.5ad89501.js";import"./RightAngleQuadVisualElement.66a46a47.js";import"./Segment.585ecfe3.js";import"./elevationInfoUtils.a10a019a.js";import"./dragEventPipeline3D.81de2ddd.js";import"./EditGeometryOperations.ec597bbd.js";import"./QueryEngineResult.5f116c82.js";import"./WhereClause.3fd56000.js";import"./utils.d90b3912.js";import"./ClassBreaksDefinition.acc91e1f.js";import"./json.d1a0fa35.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:s(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>l(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([c("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
