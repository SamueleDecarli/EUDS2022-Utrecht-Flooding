import{y as n,r as c,e as r,d as i,n as l}from"./index.d1e29527.js";import{o as s}from"./queryEngineUtils.b8cdb660.js";import"./DimensioningAnalysisView3D.447ade76.js";import"./LineVisualElement.d57841fb.js";import"./analysisViewUtils.b0b00094.js";import"./PointVisualElement.d67148f1.js";import"./RightAngleQuadVisualElement.483af350.js";import"./Segment.f1e69e0a.js";import"./elevationInfoUtils.4187554a.js";import"./dragEventPipeline3D.d145bb2a.js";import"./EditGeometryOperations.063eeee7.js";import"./QueryEngineResult.66650d64.js";import"./WhereClause.e4386ee5.js";import"./utils.f50a34af.js";import"./ClassBreaksDefinition.f940f1b9.js";import"./json.d1a0fa35.js";import"./dehydratedFeatureComparison.c68b6560.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:c(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>s(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([l("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
