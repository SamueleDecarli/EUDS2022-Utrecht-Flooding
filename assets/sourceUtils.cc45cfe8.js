import{hi as y,ga as g,ny as p,nz as w,nA as I,fy as f,t as h,bl as b}from"./index.80f43001.js";class _{constructor(){this.code=null,this.description=null}}class v{constructor(t){this.error=new _,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new v(e)}class q{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function j(e){return new q(e)}const a=new Set;function z(e,t,i,m=!1,u){a.clear();for(const r in i){const n=e.get(r);if(!n)continue;const l=i[r],s=P(n,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:l,sanitizedValue:s}}),a.add(n.name),n&&(m||n.editable)){const c=w(n,s);if(c)return d(I(c,n,s));t[n.name]=s}}for(const r of e.requiredFields)if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function P(e,t){let i=t;return typeof t=="string"&&y(e)?i=parseFloat(t):t!=null&&g(e)&&typeof t!="string"&&(i=String(t)),p(i)}let o;function A(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function E(){return h(o)&&(o=await b(()=>import("./geometryEngineJSON.588858d2.js"),["assets/geometryEngineJSON.588858d2.js","assets/geometryEngineBase.cf4f989f.js","assets/geometryEngineJSON.a34a7363.js","assets/json.d1a0fa35.js"])),o}async function F(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await E()}export{d as a,j as f,A as g,z as m,F as w};
