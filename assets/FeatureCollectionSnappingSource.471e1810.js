import{y as n,r as c,e as r,d as i,n as l}from"./index.80f43001.js";import{o as s}from"./queryEngineUtils.1d0abf20.js";import"./DimensioningAnalysisView3D.5c6cc1de.js";import"./LineVisualElement.5c879375.js";import"./analysisViewUtils.368e27ad.js";import"./PointVisualElement.69e1f673.js";import"./RightAngleQuadVisualElement.d49d1cb3.js";import"./Segment.f83d7c53.js";import"./elevationInfoUtils.05876777.js";import"./dragEventPipeline3D.fc646183.js";import"./EditGeometryOperations.4627d6ff.js";import"./QueryEngineResult.4fd5dc31.js";import"./WhereClause.0e6b7dc6.js";import"./utils.fba20cb6.js";import"./ClassBreaksDefinition.df7aa87e.js";import"./json.d1a0fa35.js";import"./dehydratedFeatureComparison.6fd14f99.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:c(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>s(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([l("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
